---
import "@/styles/globals.css";
import Header from "@components/Header.astro";
import { Button } from "@components/ui/button";
import { ChevronLeftIcon } from "lucide-react";
const { frontmatter } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap"
      rel="stylesheet"
    />
    <title>{frontmatter.title}</title>
  </head>
  <body>
    <main>
      <Header />
      <a href="/blogs">
        <Button variant="link" className="pl-0">
          <ChevronLeftIcon className="mr-2 h-4 w-4" />back to blogs
        </Button>
      </a>
      <article class="prose mt-4 max-w-full dark:prose-invert">
        <slot />
      </article>
    </main>
  </body>
</html>
<style>
  html {
    font-family: "Lato", sans-serif;
  }
  body {
    margin: 0;
  }
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    margin-bottom: 8rem;
  }
</style>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
